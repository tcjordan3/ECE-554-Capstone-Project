# -*- coding: utf-8 -*-
"""optimized_dtw_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j9D8_tpVTKn9iQHsSO2w7w1KwZmJDZ4J
"""

import numpy as np

def dtw_shift_register(input_seq, reference_seq, radius=4):
    n = len(input_seq)
    m = len(reference_seq)
    INF = float('inf')

    # Initialize current and previous row with infinities
    last = INF
    band = [INF] * (2 * radius)
    out = INF

    for i in range(n):
        xi = input_seq[i]
        row_start = int(max(0, i - (radius/2)))
        row_end = int(min(m, i + (radius/2)))

        for j in range(row_start, row_end):
            yj = reference_seq[j]
            band_idx = j - (i - radius)
            # Get values from previous row or use INF if out of range
            d = abs(xi - yj)

            a = last
            b = band[-1]
            c = out

            min_prev = min(a, b, c)

            if i == 0 and j == 0:
                cost = d
            else:
                cost = d + min_prev

            # Update shift register-style components
            out = band[-1] if 0 <= band_idx < len(band) else INF
            for f in range(1, 2 * radius):
              band[f] = band[f-1]
            band[0] = last
            last = cost
            print(f"camera = {xi} refer = {yj} score = {cost} last = {a} band = {b} out = {c}")

    # DTW distance is the bottom-right corner (within the band)
    return out

refer = [90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195]
camera = [31, 47, 47, 47, 47, 43, 43, 53, 47, 65, 71, 71, 75, 79, 83, 85, 85, 77, 71, 71, 45, 43]
band_radius = 4

score = dtw_shift_register( camera, refer, band_radius)
print("DTW Score:", score)
#print("DTW Matrix:\n", dtw_matrix)

